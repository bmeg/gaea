Hey guys,

I think that was a great conversation today, thanks for all taking part. I have been thinking about this since and I want to get all these thoughts out while they are happening. 

I think we are getting caught up in the "CWL vs some new thing" debate which I think is missing the key. I am not talking about replacing CWL or trying to replicate its functionality at all. What I am proposing is that we design the system we need as a set of components, each of which has a narrow scope and also a minimal interface to the other components. 

Here are the components I think we need. I will list them here and then go into further depth later:

* DAG Resolution
* Data Store with simple universal key/value interface
* Function-interface Wrapper around arbitrary command line whatever
* Task Execution

So, here is each in more detail and how they relate to the other components.

**DAG resolution**

This is where the provenance graph lives describing all data and its relationships. Its main function is to trigger the execution of a task when its inputs are available and there are outputs which are not yet computed. Also it should be able to generate new tasks dynamically.

DAG resolution itself was solved decades ago and is the simplest problem in a way because it does not rely on any particular technology or dependency or stack or language, it is pure algorithm.

Its relationship to the Data Store is that it needs to be able to query the state of a key. The states for our purposes could probably be `EMPTY`, `COMPUTING`, `PRESENT` (with failure really just reverting to `EMPTY` state for now). If there is a task whose outputs are all `PRESENT` or `COMPUTING` then it doesn't need to be triggered (you could also say trigger the task if its inputs are `PRESENT` and any one of its outputs are `EMPTY`). 

The relationship to the Function-Interface Wrapper is that every task it triggers must be expressed in a simple functional interface ie: accepts a map of input-keys to Data Store keys and returns a map of output-keys to Data Store keys. I think this is the part where Kyle is most concerned that we will try to replicate CWL because it is super messy. I don't want to do any of this stuff and would be happy if everything that doesn't already conform to a functional interface was adapted using CWL. I think this is the greatest strength of CWL in my opinion and something we would want to harness if we can. Even if we can just extract or isolate the part of CWL that does this, or get it to execute that way at least (which is I think what Kyle was alluding to). I don't necessarily think we need to do this if the thing can already be run using a functional interface, but really I don't care.

Finally, the relationship to the Task Execution system is simply to generate the task document and post it to the service. The key here is that the DAG resolver's reference to the data store and the Task Execution system's reference to the data store necessarily need to be symmetrical, which is why I think the minimal Data Store interface sketched out above (`EMPTY`, `COMPUTING`, `PRESENT` under a key) could be significant here to avoid unnecessary duplication of effort and introduction of failures through mismatched configuration. 

So, based on that I think we even have all these components, we just need to figure out how to orient them towards each other.

* DAG Resolution, triggering events (Gaia)
* Data Store with simple universal key/value interface (Funnel provides the minimal state API to whatever data store it is already using)
* Function-interface Wrapper around arbitrary command line whatever (CWL)
* Task Execution (Funnel)

Thoughts on this?

Thanks again! Looking forward to finally solving this problem : )

- R